# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import netcode_pb2 as netcode__pb2


class GameComStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewMatch = channel.unary_unary(
                '/netcode.GameCom/NewMatch',
                request_serializer=netcode__pb2.MatchRequest.SerializeToString,
                response_deserializer=netcode__pb2.MatchResponse.FromString,
                )
        self.SubmitTurn = channel.unary_unary(
                '/netcode.GameCom/SubmitTurn',
                request_serializer=netcode__pb2.TurnRequest.SerializeToString,
                response_deserializer=netcode__pb2.TurnResponse.FromString,
                )
        self.GetGameState = channel.unary_unary(
                '/netcode.GameCom/GetGameState',
                request_serializer=netcode__pb2.MatchIDPacket.SerializeToString,
                response_deserializer=netcode__pb2.GameStateResponse.FromString,
                )
        self.GetTimeout = channel.unary_unary(
                '/netcode.GameCom/GetTimeout',
                request_serializer=netcode__pb2.MatchIDPacket.SerializeToString,
                response_deserializer=netcode__pb2.GetTimeoutResponse.FromString,
                )
        self.GetOpponentInfo = channel.unary_unary(
                '/netcode.GameCom/GetOpponentInfo',
                request_serializer=netcode__pb2.MatchIDPacket.SerializeToString,
                response_deserializer=netcode__pb2.OpponentInfoResponse.FromString,
                )
        self.AbortMatch = channel.unary_unary(
                '/netcode.GameCom/AbortMatch',
                request_serializer=netcode__pb2.MatchIDPacket.SerializeToString,
                response_deserializer=netcode__pb2.Nothing.FromString,
                )
        self.GetElo = channel.unary_unary(
                '/netcode.GameCom/GetElo',
                request_serializer=netcode__pb2.IDPacket.SerializeToString,
                response_deserializer=netcode__pb2.EloValues.FromString,
                )
        self.UserRegistration = channel.unary_unary(
                '/netcode.GameCom/UserRegistration',
                request_serializer=netcode__pb2.UserRegistrationRequest.SerializeToString,
                response_deserializer=netcode__pb2.UserRegistrationResponse.FromString,
                )
        self.GroupRegistration = channel.unary_unary(
                '/netcode.GameCom/GroupRegistration',
                request_serializer=netcode__pb2.GroupRegistrationRequest.SerializeToString,
                response_deserializer=netcode__pb2.GroupRegistrationResponse.FromString,
                )
        self.SetGroupPseudonym = channel.unary_unary(
                '/netcode.GameCom/SetGroupPseudonym',
                request_serializer=netcode__pb2.SetPseudonymRequest.SerializeToString,
                response_deserializer=netcode__pb2.SetPseudonymResponse.FromString,
                )
        self.SetUserPseudonym = channel.unary_unary(
                '/netcode.GameCom/SetUserPseudonym',
                request_serializer=netcode__pb2.SetPseudonymRequest.SerializeToString,
                response_deserializer=netcode__pb2.SetPseudonymResponse.FromString,
                )
        self.GetUserToken = channel.unary_unary(
                '/netcode.GameCom/GetUserToken',
                request_serializer=netcode__pb2.AuthPacket.SerializeToString,
                response_deserializer=netcode__pb2.GetUserTokenResponse.FromString,
                )


class GameComServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NewMatch(self, request, context):
        """Game-related
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitTurn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGameState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTimeout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOpponentInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortMatch(self, request, context):
        """Disabled
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetElo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserRegistration(self, request, context):
        """Organisation-related
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GroupRegistration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGroupPseudonym(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetUserPseudonym(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GameComServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewMatch': grpc.unary_unary_rpc_method_handler(
                    servicer.NewMatch,
                    request_deserializer=netcode__pb2.MatchRequest.FromString,
                    response_serializer=netcode__pb2.MatchResponse.SerializeToString,
            ),
            'SubmitTurn': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTurn,
                    request_deserializer=netcode__pb2.TurnRequest.FromString,
                    response_serializer=netcode__pb2.TurnResponse.SerializeToString,
            ),
            'GetGameState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGameState,
                    request_deserializer=netcode__pb2.MatchIDPacket.FromString,
                    response_serializer=netcode__pb2.GameStateResponse.SerializeToString,
            ),
            'GetTimeout': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTimeout,
                    request_deserializer=netcode__pb2.MatchIDPacket.FromString,
                    response_serializer=netcode__pb2.GetTimeoutResponse.SerializeToString,
            ),
            'GetOpponentInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOpponentInfo,
                    request_deserializer=netcode__pb2.MatchIDPacket.FromString,
                    response_serializer=netcode__pb2.OpponentInfoResponse.SerializeToString,
            ),
            'AbortMatch': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortMatch,
                    request_deserializer=netcode__pb2.MatchIDPacket.FromString,
                    response_serializer=netcode__pb2.Nothing.SerializeToString,
            ),
            'GetElo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetElo,
                    request_deserializer=netcode__pb2.IDPacket.FromString,
                    response_serializer=netcode__pb2.EloValues.SerializeToString,
            ),
            'UserRegistration': grpc.unary_unary_rpc_method_handler(
                    servicer.UserRegistration,
                    request_deserializer=netcode__pb2.UserRegistrationRequest.FromString,
                    response_serializer=netcode__pb2.UserRegistrationResponse.SerializeToString,
            ),
            'GroupRegistration': grpc.unary_unary_rpc_method_handler(
                    servicer.GroupRegistration,
                    request_deserializer=netcode__pb2.GroupRegistrationRequest.FromString,
                    response_serializer=netcode__pb2.GroupRegistrationResponse.SerializeToString,
            ),
            'SetGroupPseudonym': grpc.unary_unary_rpc_method_handler(
                    servicer.SetGroupPseudonym,
                    request_deserializer=netcode__pb2.SetPseudonymRequest.FromString,
                    response_serializer=netcode__pb2.SetPseudonymResponse.SerializeToString,
            ),
            'SetUserPseudonym': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUserPseudonym,
                    request_deserializer=netcode__pb2.SetPseudonymRequest.FromString,
                    response_serializer=netcode__pb2.SetPseudonymResponse.SerializeToString,
            ),
            'GetUserToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserToken,
                    request_deserializer=netcode__pb2.AuthPacket.FromString,
                    response_serializer=netcode__pb2.GetUserTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'netcode.GameCom', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GameCom(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NewMatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netcode.GameCom/NewMatch',
            netcode__pb2.MatchRequest.SerializeToString,
            netcode__pb2.MatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitTurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netcode.GameCom/SubmitTurn',
            netcode__pb2.TurnRequest.SerializeToString,
            netcode__pb2.TurnResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGameState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netcode.GameCom/GetGameState',
            netcode__pb2.MatchIDPacket.SerializeToString,
            netcode__pb2.GameStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTimeout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netcode.GameCom/GetTimeout',
            netcode__pb2.MatchIDPacket.SerializeToString,
            netcode__pb2.GetTimeoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOpponentInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netcode.GameCom/GetOpponentInfo',
            netcode__pb2.MatchIDPacket.SerializeToString,
            netcode__pb2.OpponentInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AbortMatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netcode.GameCom/AbortMatch',
            netcode__pb2.MatchIDPacket.SerializeToString,
            netcode__pb2.Nothing.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetElo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netcode.GameCom/GetElo',
            netcode__pb2.IDPacket.SerializeToString,
            netcode__pb2.EloValues.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserRegistration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netcode.GameCom/UserRegistration',
            netcode__pb2.UserRegistrationRequest.SerializeToString,
            netcode__pb2.UserRegistrationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GroupRegistration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netcode.GameCom/GroupRegistration',
            netcode__pb2.GroupRegistrationRequest.SerializeToString,
            netcode__pb2.GroupRegistrationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetGroupPseudonym(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netcode.GameCom/SetGroupPseudonym',
            netcode__pb2.SetPseudonymRequest.SerializeToString,
            netcode__pb2.SetPseudonymResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetUserPseudonym(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netcode.GameCom/SetUserPseudonym',
            netcode__pb2.SetPseudonymRequest.SerializeToString,
            netcode__pb2.SetPseudonymResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netcode.GameCom/GetUserToken',
            netcode__pb2.AuthPacket.SerializeToString,
            netcode__pb2.GetUserTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
